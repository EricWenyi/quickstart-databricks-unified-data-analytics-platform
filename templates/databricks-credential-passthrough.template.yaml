AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This template creates meta instance IAM role for Credential Passthrough (qs-1qdh8efjb).

Metadata:
  LICENSE: Apache License Version 2.0
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "The meta instance profile role name to be created"
        Parameters:
          - MetaInstanceProfileRoleName
      - Label:
          default: "Required parameters for credential passthrough"
        Parameters:
          - AccountID
          - CrossAccountIAMRole
          - DataIAMRole1
          - DataIAMRole2
      - Label:
          default: "Optional parameters"
        Parameters:  
          - DataIAMRole3
          - DataIAMRole4
          - DataIAMRole5
    ParameterLabels:
      AccountID:
        default: Your AWS Account ID
      CrossAccountIAMRole:
        default: Name of an existing cross-account IAM role
      MetaInstanceProfileRoleName:
        default: Name for a new meta instance profile role in your AWS account
      DataIAMRole1:
        default: Name of an existing Data role, with a pre-configured S3 bucket.
      DataIAMRole2:
        default: Name of an existing Data role, with a pre-configured S3 bucket.
      DataIAMRole3:
        default: Name of an existing Data role, with a pre-configured S3 bucket.
      DataIAMRole4:
        default: Name of an existing Data role, with a pre-configured S3 bucket.
      DataIAMRole5:
        default: Name of an existing Data role, with a pre-configured S3 bucket.

Outputs:
  MetaInstanceProfileRoleARN:
    Description: ARN of the meta instance profile role.
    Value: !GetAtt 
      - MetaInstanceProfile
      - Arn

Parameters:
  AccountID:
    Description: Your 12-digit AWS account ID
    MinLength: '12'
    Type: String
  CrossAccountIAMRole:
    Description: Only alphanumeric characters and hyphens. Minimum 8 characters
    AllowedPattern: '^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$'
    MinLength: '8'
    Type: String
  MetaInstanceProfileRoleName:
    Description: Only alphanumeric characters and hyphens. Minimum 8 characters
    AllowedPattern: '^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$'
    MinLength: '8'
    Type: String
  DataIAMRole1:
    Description: Only alphanumeric characters. Minimum 8 characters
    MinLength: '8'
    Type: String
  DataIAMRole2:
    Description: Only alphanumeric characters. Minimum 8 characters
    MinLength: '8'
    Type: String
  DataIAMRole3:
    Description: Only alphanumeric characters.
    Type: String
    Default: ''
  DataIAMRole4:
    Description: Only alphanumeric characters.
    Type: String
    Default: ''
  DataIAMRole5:
    Description: Only alphanumeric characters.
    Type: String
    Default: ''

Conditions:
  DataIAMRole3Exist: !Not [!Equals [!Ref DataIAMRole3, '' ]]
  DataIAMRole4Exist: !Not [!Equals [!Ref DataIAMRole4, '' ]]
  DataIAMRole5Exist: !Not [!Equals [!Ref DataIAMRole5, '' ]]

Resources:
  # 1. Create Meta Instance IAM Role
  MetaInstanceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: 
                - 'ec2.amazonaws.com'
            Sid: ''
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyDocument:
            Statement:
              - Sid: AssumeDataRoles
                Effect: Allow
                Action:
                  - 'sts:AssumeRole'
                Resource:
                  - !Sub 'arn:aws:iam::${AccountID}:role/${DataIAMRole1}'
                  - !Sub 'arn:aws:iam::${AccountID}:role/${DataIAMRole2}'
                  - !If [DataIAMRole3Exist, !Sub 'arn:aws:iam::${AccountID}:role/${DataIAMRole3}', !Ref 'AWS::NoValue']
                  - !If [DataIAMRole4Exist, !Sub 'arn:aws:iam::${AccountID}:role/${DataIAMRole4}', !Ref 'AWS::NoValue']
                  - !If [DataIAMRole5Exist, !Sub 'arn:aws:iam::${AccountID}:role/${DataIAMRole5}', !Ref 'AWS::NoValue']
            Version: 2012-10-17
          PolicyName: 'databricks-meta-instance-iam-role'
      RoleName: !Ref MetaInstanceProfileRoleName
    Type: 'AWS::IAM::Role'

  # 2. Create the Meta Instance Profile Name
  MetaInstanceProfile:
    Properties:
      Path: / 
      Roles: 
        - Ref: "MetaInstanceRole"
      InstanceProfileName: !Ref MetaInstanceRole
    Type: 'AWS::IAM::InstanceProfile'

  # 3. Edit the trust relationship of each data role 
  EditTrustRelationship:
    Type: Custom::EditTrustRelationship
    Properties:
      ServiceToken: !GetAtt 'EditTrustRelationshipFunction.Arn'
      MetaInstanceIAMRoleArn: !GetAtt 'MetaInstanceRole.Arn'
      DataRoleName1: !Ref 'DataIAMRole1'
      DataRoleName2: !Ref 'DataIAMRole2'
      DataRoleName3: !If [DataIAMRole3Exist, !Ref 'DataIAMRole3', '']
      DataRoleName4: !If [DataIAMRole4Exist, !Ref 'DataIAMRole4', '']
      DataRoleName5: !If [DataIAMRole5Exist, !Ref 'DataIAMRole5', '']
  EditIAMPermissionsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: iam-admin-privileges
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:*
                Resource:
                  - '*'
  EditTrustRelationshipFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Edit trust relationship of the data role
      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt 'EditIAMPermissionsRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          client = boto3.client('iam')

          def get_trust_policy_stmt(role_name):
              # describe iam role
              response_get_role = client.get_role(
                  RoleName=role_name
              )
              trust_policy_stmt = response_get_role['Role']['AssumeRolePolicyDocument']['Statement']
              print('iam role trust policy is: '+ str(trust_policy_stmt))
              return(trust_policy_stmt)
          def update_trust_policy(role_name, add_trust_policy_stmt):
              current_trust_policy_stmt = get_trust_policy_stmt(role_name)
              # create iam role trust policy document
              new_trust_policy_stmt = current_trust_policy_stmt + json.loads(add_trust_policy_stmt)
              print('new trust policy stmt: ' + str(new_trust_policy_stmt))
              # create AssumeRolePolicyDocument string
              new_trust_policy_doc = '{"Version": "2012-10-17","Statement":'+json.dumps(new_trust_policy_stmt)+'}'
              print('new trust policy: '+ new_trust_policy_doc)
              # update iam role trust policy document
              response = client.update_assume_role_policy(
                  RoleName=role_name,
                  PolicyDocument=new_trust_policy_doc
              )
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  role_name1 = event['ResourceProperties']['DataRoleName1']
                  role_name2 = event['ResourceProperties']['DataRoleName2']
                  role_name3 = event['ResourceProperties']['DataRoleName3']
                  role_name4 = event['ResourceProperties']['DataRoleName4']
                  role_name5 = event['ResourceProperties']['DataRoleName5']
                  meta_instance_iam_role_arn = event['ResourceProperties']['MetaInstanceIAMRoleArn']
                  additional_trust_policy_stmt = '[{"Effect":"Allow","Principal":{"AWS":["' +meta_instance_iam_role_arn+ '"]},"Action":["sts:AssumeRole"]}]'
                  print('role_name1 - '+role_name1)
                  print('role_name2 - '+role_name2)
                  print('role_name3 - '+role_name3)
                  print('role_name4 - '+role_name4)
                  print('role_name5 - '+role_name5)
                  print('meta_instance_iam_role_arn - '+meta_instance_iam_role_arn)
                  print('additional_trust_policy_stmt - '+additional_trust_policy_stmt)
                  
                  if event['RequestType'] == 'Create':
                    update_trust_policy(role_name1, additional_trust_policy_stmt)
                    update_trust_policy(role_name2, additional_trust_policy_stmt)
                    if role_name3 != '':
                      update_trust_policy(role_name3, additional_trust_policy_stmt)
                    if role_name4 != '':
                      update_trust_policy(role_name4, additional_trust_policy_stmt)
                    if role_name5 != '':
                      update_trust_policy(role_name5, additional_trust_policy_stmt)    
                  else:
                    pass
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)
  
  # 4. Add IAM Pass role permission to the Cross account IAM role 
  AddPassRolePermission:
    Type: Custom::AddPassRolePermission
    Properties:
      ServiceToken: !GetAtt 'AddPassRolePermissionFunction.Arn'
      MetaInstanceIAMRoleArn: !GetAtt 'MetaInstanceRole.Arn'
      CrossAccountRoleName: !Ref 'CrossAccountIAMRole'
  AddPassRolePermissionFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Edit cross account role to add IAM passrole permission
      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt 'EditIAMPermissionsRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          client = boto3.client('iam')

          def add_permissions(role_name, passrole_policy_document):
              # add permissions to the iam role
              response = client.put_role_policy(
                  PolicyDocument=passrole_policy_document,
                  PolicyName='PassRolePolicy',
                  RoleName=role_name,
              )
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  role_name = event['ResourceProperties']['CrossAccountRoleName']
                  meta_instance_iam_role_arn = event['ResourceProperties']['MetaInstanceIAMRoleArn']
                  passrole_policy_document = '{"Version":"2012-10-17","Statement":{"Effect":"Allow","Action":"iam:PassRole","Resource":"' +meta_instance_iam_role_arn+ '"}}'
                  
                  if event['RequestType'] == 'Create':
                    add_permissions(role_name, passrole_policy_document)
                  else:
                    pass
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)
